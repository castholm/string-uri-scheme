



Network Working Group                                         C. Ã…stholm
Internet-Draft                                            6 October 2022
Intended status: Experimental                                           
Expires: 9 April 2023


                        The "string" URI Scheme
                draft-castholm-string-uri-scheme-latest

Abstract

   This document defines the "string" URI scheme, string URIs and rules
   for applications that use string URIs.  A string URI includes a
   payload representing a string of characters that can be interpreted
   in an application-dependent manner to identify and possibly locate a
   resource.  This enables applications to specify such a string in a
   context where a proper URI is required.  String URIs have a strict
   syntax and well-defined rules for processing and comparing that make
   them simple for applications to use.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://castholm.github.io/string-uri-scheme/draft-castholm-string-
   uri-scheme.html.  Status information for this document may be found
   at https://datatracker.ietf.org/doc/draft-castholm-string-uri-
   scheme/.

   Source for this draft and an issue tracker can be found at
   https://github.com/castholm/string-uri-scheme.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 9 April 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.

Table of Contents

   1.  Introduction
   2.  Terminology
   3.  Structure and Usage
     3.1.  Components of a String URI
     3.2.  Using String URIs
     3.3.  Obtaining the String URI Payload
     3.4.  Comparing String URIs
     3.5.  Locating Resources Identified by String URIs
   4.  Syntax
   5.  Conformance
     5.1.  Conformance Requirements
     5.2.  Recommendations for Handling Nonconforming String URIs
   6.  Examples
   7.  Security Considerations
   8.  IANA Considerations
     8.1.  Registration of the "string" URI Scheme
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Acknowledgments
   Author's Address

1.  Introduction

   Sometimes, application developers find themselves in situations where
   a particular protocol mandates the use of URIs (Uniform Resource
   Identifiers [RFC3986]).  Most popular URI schemes are designed for
   identifiers to have very specific meanings and to be globally unique.
   This can be inconvenient when only a simple, locally unique
   identifier with an application-dependent meaning is desired.

   There exists a need for a simple URI (Uniform Resource Identifier)
   scheme that satisfies the following requirements:

   *  Identifiers include a string of characters that can be interpreted
      in an application-dependent manner to identify and possibly locate
      a resource.

   *  Identifiers have a strict yet simple and familiar syntax that is
      easy for humans to remember.

   *  Identifiers are convenient for application developers and users to
      use.

   *  Identifiers have well-defined rules for comparing that are trivial
      for application developers to implement.

   Existing URI schemes satisfy some, but not all, of the above
   requirements.

   *  HTTP (Hypertext Transfer Protocol) URIs [RFC9110] (Section 4.2)
      are familiar to most users and can include arbitrary application-
      dependent data.  However, minting new HTTP URIs require a
      registered domain name that may change owners in the future,
      making them inconvenient to use as stable identifiers, and the
      rules for comparing identifiers are poorly specified.

   *  URNs (Uniform Resource Names [RFC8141]) require using pre-existing
      namespaces, which come with their own rules and restrictions, or
      registering new namespaces, which is often inconvenient.  While
      URNs have well-defined rules for comparing, such rules are non-
      trivial to implement in practice.

   *  Data URIs [RFC2397] are simple to use, but no normative rules for
      comparing data URIs have been specified and they technically only
      identify and locate their own included payload.

   *  Tag URIs [RFC4151] have simple, well-defined rules for comparing,
      but because they are designed to be unique across time and space
      their structure may feel nedlessly complex for applications that
      only require local uniqueness.

   This specification introduces the "string" URI scheme, which is
   designed to satisfy all of the above requirements.

   The following is an example of an identifier using the "string" URI
   scheme:

      string:UserNotFoundError

   Such an identifier might, for example, identify an application-
   specific error type representing an error indicating that a user was
   not able to be found.  The same identifier might also be used to
   locate more information about the error type, using a method defined
   and specified by the application.

2.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   For simplicity, this specification uses the term "character(s)" to
   mean "Unicode scalar value(s)" as defined by definition D76 in
   Section 3.9 of [UNICODE].  When this specification requires attention
   to be carefully directed toward the specific implications of "Unicode
   scalar value(s)", that specific term is used in order to reduce
   ambiguity.

3.  Structure and Usage

3.1.  Components of a String URI

   TODO Components of a String URI

3.2.  Using String URIs

   TODO Using String URIs

3.3.  Obtaining the String URI Payload

   TODO Obtaining the String URI Payload

3.4.  Comparing String URIs

   TODO Comparing String URIs

3.5.  Locating Resources Identified by String URIs

   TODO Locating Resources Identified by String URIs

4.  Syntax

   The string URI syntax is a subset of the generic URI syntax defined
   in [RFC3986].

   Using ABNF and including the "DIGIT" and "ALPHA" rules defined in
   [RFC2234], the string URI syntax is defined by the "string-URI" rule
   in the following ABNF specification:

      string-URI  = %x73.74.72.69.6E.67 ":" payload
      payload     = *( unencoded / pct-encoded )
      unencoded   = DIGIT / ALPHA / "-" / "_"
      pct-encoded = "%" ( pct-1 / pct-2 / pct-3 / pct-4 )

      pct-1       = %x30-31 upper-hex
                  / "2" ( DIGIT / %x41-43 / %x45-46 )
                  / "3" %x41-46
                  / ( "4" / "6" ) "0"
                  / "5" %x42-45
                  / "7" %x42-46

      pct-2       = pct-2-1 pct-cont
      pct-2-1     = %x43 ( %x32-39 / %x41-46 )
                  / %x44 upper-hex

      pct-3       = pct-3-1-2 pct-cont
      pct-3-1-2   = %x45 ( "0%" %x41-42 upper-hex
                         / ( %x31-39 / %x41-43 / %x45-46 ) pct-cont
                         / %x44 "%" %x38-39 upper-hex
                         )

      pct-4       = pct-4-1-2 pct-cont pct-cont
      pct-4-1-2   = %x46 ( "0%" ( "9" / %x41-42 ) upper-hex
                         / %x31-33 pct-cont
                         / "4%8" upper-hex
                         )

      pct-cont    = "%" ( %x38-39 / %x41-42 ) upper-hex

      upper-hex   = %x30-39 / %x41-46

   Readers should note that the "pct-encoded" rule is NOT equivalent to
   the rule of the same name found in Section 2.1 of [RFC3986] and
   instead describes a much more constrained syntax that ensures that
   percent-encoded octets use only uppercase hexadecimal digits and do
   not decode to invalid UTF-8 or characters matched by the "unencoded"
   rule.

   Observant readers will also note that the "unencoded" rule describes
   the base64url alphabet found in Section 2.1 of [RFC4648], which may
   already be familiar.

   The string URI syntax is also described by the following POSIX
   regular expression (where whitespace is included for readability but
   should be ignored):

      ^string:(([0-9A-Za-z\-_]|%(
       [01][0-9A-F]|
       2[0-9ABCEF]|
       3[A-F]|
       [46]0|
       5[B-E]|
       7[B-F]|
       (
        (C[2-9A-F]|D[0-9A-F])|
        E(
         0%[AB][0-9A-F]|
         [1-9ABCEF]%[89AB][0-9A-F]|
         D%[89][0-9A-F]
        )|
        F(
         0%[9AB][0-9A-F]|
         [123]%[89AB][0-9A-F]|
         4%8[0-9A-F]
        )%[89AB][0-9A-F]
       )%[89AB][0-9A-F]
      ))*)$

5.  Conformance

5.1.  Conformance Requirements

   A string URI MUST conform to the "string-URI" syntax rule defined in
   Section 4.

5.2.  Recommendations for Handling Nonconforming String URIs

   TODO Recommendations for Handling Nonconforming String URIs

6.  Examples

   TODO Examples

7.  Security Considerations

   TODO Security Considerations

8.  IANA Considerations

8.1.  Registration of the "string" URI Scheme

   Scheme name:
      string

   Status:
      Provisional

   Applications/protocols that use this scheme name:
      Any application or protocol may use this scheme for any purpose,
      provided that its use conforms to the rules defined by this
      specification.

   Contact:
      N/A

   Change controller:
      N/A

   References:
      This specification

9.  References

9.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC2234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", RFC 2234, DOI 10.17487/RFC2234,
              November 1997, <https://www.rfc-editor.org/rfc/rfc2234>.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <https://www.rfc-editor.org/rfc/rfc3986>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [UNICODE]  "The Unicode Consortium. The Unicode Standard, Version
              15.0.0, (Mountain View, CA: The Unicode Consortium, 2022.
              ISBN 978-1-936213-32-0)", n.d.,
              <https://www.unicode.org/versions/Unicode15.0.0/>.

9.2.  Informative References

   [RFC2397]  Masinter, L., "The "data" URL scheme", RFC 2397,
              DOI 10.17487/RFC2397, August 1998,
              <https://www.rfc-editor.org/rfc/rfc2397>.

   [RFC4151]  Kindberg, T. and S. Hawke, "The 'tag' URI Scheme",
              RFC 4151, DOI 10.17487/RFC4151, October 2005,
              <https://www.rfc-editor.org/rfc/rfc4151>.

   [RFC4648]  Josefsson, S., "The Base16, Base32, and Base64 Data
              Encodings", RFC 4648, DOI 10.17487/RFC4648, October 2006,
              <https://www.rfc-editor.org/rfc/rfc4648>.

   [RFC8141]  Saint-Andre, P. and J. Klensin, "Uniform Resource Names
              (URNs)", RFC 8141, DOI 10.17487/RFC8141, April 2017,
              <https://www.rfc-editor.org/rfc/rfc8141>.

   [RFC9110]  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "HTTP Semantics", STD 97, RFC 9110,
              DOI 10.17487/RFC9110, June 2022,
              <https://www.rfc-editor.org/rfc/rfc9110>.

Acknowledgments

   TODO Acknowledgments

Author's Address

   Carl Ã…stholm
   Email: carl@astholm.se
